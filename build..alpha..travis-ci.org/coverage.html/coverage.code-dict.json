{"/home/travis/build/npmtest/node-npmtest-gulp-run/test.js":"/* istanbul instrument in package npmtest_gulp_run */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-run/lib.npmtest_gulp_run.js":"/* istanbul instrument in package npmtest_gulp_run */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_run = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_run = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-run/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-run && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_run */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_run\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_run.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_run.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_run.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_run.__dirname +\n                    '/lib.npmtest_gulp_run.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-run/gulp-run/index.js":"/**\n * Pipe shell commands in gulp.\n * @module gulp-run\n */\n\nvar inherit = require('util').inherits;\nvar Transform = require('stream').Transform;\nvar Command = require('./command');\n\n/**\n * Creates a GulpRunner.\n *\n * A GulpRunner is a Vinyl transform stream that spawns a child process to\n * transform the file. A separate process is spawned to handle each file\n * passing through the stream.\n *\n * @param {string} template\n * @param {object} options\n */\nfunction GulpRunner(template, options) {\n  if (!(this instanceof GulpRunner)) {\n    return new GulpRunner(template, options);\n  }\n\n  this.command = new Command(template, options || {});\n  Transform.call(this, { objectMode: true });\n}\n\n/**\n * @extends {Stream.Transform}\n */\ninherit(GulpRunner, Transform);\n\n/**\n * @param  {string}   file\n * @param  {string}   encoding\n * @param  {function} callback\n * @return {void}\n */\nGulpRunner.prototype._transform = function _transform(file, encoding, callback) {\n  var newfile = this.command.exec(file, callback);\n  this.push(newfile);\n};\n\n/**\n * Writes `stdin` to itself and returns itself.\n *\n * Whenever an object is written into the GulpRunner, a new process is\n * spawned taking that data as standard input, and a Vinyl file wrapping the\n * process's standard output is pushed downstream.\n *\n * `stdin` may be a String, Buffer, Readable stream, or Vinyl file.\n *\n * @param  {mixed}   stdin\n * @param  {function} callback\n * @return {GulpRunner}\n */\nGulpRunner.prototype.exec = function exec(stdin, callback) {\n  this.write(stdin, callback);\n  this.end();\n  return this;\n};\n\n/**\n * @static\n * @type {Command}\n */\nGulpRunner.Command = Command;\n\nmodule.exports = GulpRunner;\n","/home/travis/build/npmtest/node-npmtest-gulp-run/gulp-run/command.js":"var cp = require('child_process');\nvar path = require('path');\nvar stream = require('stream');\nvar util = require('util');\nvar defaults = require('lodash.defaults');\nvar applyTemplate = require('lodash.template');\nvar Vinyl = require('vinyl');\nvar gutil = require('gulp-util');\n\n/**\n * Creates a new `gulp-run` command.\n *\n * @param {string} command\n * @param {object} options\n */\nfunction Command(command, options) {\n  var previousPath;\n\n  this.command = command;\n\n  // We're on Windows if `process.platform` starts with \"win\", i.e. \"win32\".\n  this.isWindows = (process.platform.lastIndexOf('win') === 0);\n\n  // the cwd and environment of the command are the same as the main node\n  // process by default.\n  this.options = defaults(options || {}, {\n    cwd: process.cwd(),\n    env: process.env,\n    verbosity: (options && options.silent) ? 1 : 2,\n    usePowerShell: false\n  });\n\n  // include node_modules/.bin on the path when we execute the command.\n  previousPath = this.options.env.PATH;\n  this.options.env.PATH = path.join(this.options.cwd, 'node_modules', '.bin');\n  this.options.env.PATH += path.delimiter;\n  this.options.env.PATH += previousPath;\n}\n\n/**\n * Execute the command, invoking the callback when the command exits.\n * Returns a Vinyl file wrapping the command's stdout.\n *\n * @param  {string}   stdin\n * @param  {function} callback\n * @return {Stream}\n */\nCommand.prototype.exec = function exec(stdin, callback) {\n  var self = this;\n  var command;\n  var fileName;\n  var directory;\n  var subShell;\n  var log;\n  var err;\n  var stdout;\n\n  // parse the arguments, both are optional.\n  // after parsing, stdin is a vinyl file to use as standard input to\n  // the command (possibly empty), and callback is a function.\n  if (typeof stdin === 'function') {\n    callback = stdin;\n    stdin = undefined;\n  } else if (typeof callback !== 'function') {\n    callback = function noop() {};\n  }\n\n  if (!(stdin instanceof Vinyl)) {\n    fileName = this.command.split(' ')[0];\n    directory = path.join(this.options.cwd, fileName);\n\n    if (typeof stdin === 'string') {\n      stdin = new Vinyl({\n        path: directory,\n        contents: new Buffer(stdin)\n      });\n    } else if (stdin instanceof Buffer || stdin instanceof stream.Readable) {\n      stdin = new Vinyl({\n        path: directory,\n        contents: stdin\n      });\n    } else {\n      stdin = new Vinyl(stdin);\n\n      if (!stdin.path) {\n        stdin.path = directory;\n      }\n    }\n  }\n\n  // execute the command.\n  // we spawn the command in a subshell, so things like i/o redirection\n  // just work. e.g. `echo hello world >> ./hello.txt` works as expected.\n  command = applyTemplate(this.command)({\n    file: stdin\n  });\n\n  if (this.isWindows && this.options.usePowerShell) {\n    // windows powershell\n    subShell = cp.spawn('powershell.exe', ['-NonInteractive', '-NoLogo', '-Command', command], {\n      env: this.options.env,\n      cwd: this.options.cwd\n    });\n  } else if (this.isWindows) {\n    // windows cmd.exe\n    subShell = cp.spawn('cmd.exe', ['/c', command], {\n      env: this.options.env,\n      cwd: this.options.cwd\n    });\n  } else {\n    // POSIX shell\n    subShell = cp.spawn('sh', ['-c', command], {\n      env: this.options.env,\n      cwd: this.options.cwd\n    });\n  }\n\n  // setup the output\n  //\n  // - if verbosity equals to 3, the command prints directly to the terminal.\n  // - if verbosity equals to 2, the command's stdout and stderr are buffered\n  //   and printed to the user's terminal after the command exits (this\n  //   prevents overlaping output of multiple commands)\n  // - if verbosity equals to 1, the command's stderr is buffered as in 2, but\n  //   the stdout is silenced.\n  log = new stream.PassThrough();\n\n  function sendLog(context) {\n    var title = util.format(\n      '$ %s%s',\n      gutil.colors.blue(command),\n      (self.options.verbosity < 2) ? gutil.colors.grey(' # Silenced\\n') : '\\n'\n    );\n\n    context.write(title);\n  }\n\n  switch (this.options.verbosity) {\n    case 3:\n      sendLog(process.stdout);\n      subShell.stdout.pipe(process.stdout);\n      subShell.stderr.pipe(process.stderr);\n      break;\n    case 2:\n      subShell.stdout.pipe(log);\n      // fallthrough\n    case 1:\n      subShell.stderr.pipe(log);\n      sendLog(log);\n      break;\n  }\n\n  // setup the cleanup proceedure for when the command finishes.\n  subShell.once('close', function handleSubShellClose() {\n    // write the buffered output to stdout\n    var content = log.read();\n\n    if (content !== null) {\n      process.stdout.write(content);\n    }\n  });\n\n  subShell.once('exit', function handleSubShellExit(code) {\n    // report an error if the command exited with a non-zero exit code.\n    if (code !== 0) {\n      err = new Error(util.format('Command `%s` exited with code %s', command, code));\n      err.status = code;\n\n      return callback(err);\n    }\n\n    callback(null);\n  });\n\n  // the file wrapping stdout is as the one wrapping stdin (same metadata)\n  // with different contents.\n  stdout = stdin.clone();\n  stdout.contents = subShell.stdout.pipe(new stream.PassThrough());\n\n  // finally, write the input to the process's stdin.\n  stdin.pipe(subShell.stdin);\n\n  return stdout;\n};\n\n/**\n * Returns the command template.\n *\n * @return {string}\n */\nCommand.prototype.toString = function toString() {\n  return this.command;\n};\n\nmodule.exports = Command;\n"}